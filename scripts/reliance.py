import requests
import csv
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
from html2csv import html2csv

cookies = {
    'gsScrollPos': '',
    'ASP.NET_SessionId': 't5khdt55asyjcg45mlglx4yb',
    '__utmt': '1',
    'TS01bd6a83': '0163c20a9e258e4d4c5b84279e464a803c457a547296d0e29979eda2b21166a74f7066b663297a07378af9431aeb8ffbc4c0aab4c3',
    'TS01bd6a83_31': '01ac10a80670850347a08b4a7e9ba22ae8570121c1bae3c20bd7486734a83d1721841cdbd4d5ce3f9b7cb05b4dd195a5495a204a096678ef2034c47134ef29f0a78bf978422f6785ae8637d765fe896e532aa875d29858d250a78378dd64a13e39305cd3c1cd4d2d2f5484b67280b6c5e0d182b2eded68dfadd1dd688cf0185bf4869c8aabad4a706a6969201c9b7ce4e4329d9b1e53a8dfdbcb89131328cebb1cac2cabe022e839d01109d409c7035a763ca79cd9fe1fc2c42bed60a74b87ac895e7d155a5452241554dfd0b82b6cba870d15866c37facb14fd95a8515009a753f3b5f50b0374e72f750a4955bc63240720bd47126ff7b89e86cef5035e408eae1082a7a9721a13e69e5af4273354bb21e82969d31e9cf1481df39e652458cf2080f937ea1cb935b54060cf4e9c6a1547bf85890aa5a72259ccfa4bda30ab0ffe4119055c6c88571e994f7021cbb697020657d080495b3c260d574005d96322408a3fd1bb22d2c7d81baeab8029db448781c67745ff488d0e950a16f2c55a9d1e9d9a43af5189e9f1862bd7a12170ea83d9dbf22f93b22e4c21d5e61e93e77251ee0a8de1fc0d7656f3d6e197b4311ceb3bad0ad123806f616c766f1c90c2df6bf26082a5811c465b524f215dea39a09f0a05390272346ec869e7bd075db245ed42e48b6400beec76dead05f97e386d5a799b3ecb1d5b031956a12fb14205c440c565dfc984c20e295c7f69eada3c2b27ade91f0102b55a137418c8dc19133491b4f38783',
    '__utma': '1.2030872532.1493571205.1493580109.1493829339.4',
    '__utmb': '1.18.10.1493829339',
    '__utmc': '1',
    '__utmz': '1.1493571248.2.2.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)',
    'ext_name': 'jaehkpjddfdgiiefcnhahapilbejohhj',
}

headers = {
    'Origin': 'http://www.reliancepensionfund.com',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'en-IN,en-GB;q=0.8,en-US;q=0.6,en;q=0.4',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Cache-Control': 'max-age=0',
    'Referer': 'http://www.reliancepensionfund.com/navs/navhistory.aspx?shortname=navhistory',
    'Connection': 'keep-alive',
    'DNT': '1',
}

params = (
    ('shortname', 'navhistory'),
)

data = [
  ('__EVENTTARGET', ''),
  ('__EVENTARGUMENT', ''),
  ('__LASTFOCUS', ''),
  ('__VIEWSTATE', ''),
  ('__VIEWSTATEGENERATOR', '4892F9B4'),
  ('__VIEWSTATEENCRYPTED', ''),
  ('__EVENTVALIDATION', 'dtn4e+fOqHY+Jgxl7TOKalYjQZ9ocrpli0P8AIOqWFqWjPhK945rGrCq9IbNp8VRmU61UZycG2yKBbI5SyWvjZ9T8RP/o7PoB/CfoSBWg69ajFkSe8is6rbCnDXOcMgJrgf9R9bE90bAyO9ys0cSy6pJf5/XjGjIathae2rlpLGFRnI/2AC5cldugXLXtebUuNUM0A=='),
  ('txtSearchText', 'Keyword'),
  ('ctl00$Content$NAVHistory1$ddlCategory', ''),
  ('ctl00$Content$NAVHistory1$ddlSchemes', ''),
  ('ctl00$Content$NAVHistory1$btnSearch', 'Search'),
  ('ddlVGS', ''),
]
#print(dict(data))
dictData = dict(data)

fromDate = date(2009, 5, 1)
endDate = date(2017, 5, 1)
monthDelta = relativedelta(months=1)
writer = csv.writer(open("reliance.csv", "a"))
while fromDate < endDate:
    toDate = fromDate + monthDelta - timedelta(1)
    dictData['ctl00$Content$NAVHistory1$txtFromDate'] = fromDate.strftime("%d/%m/%Y")
    dictData['ddlCalMonthDivFromDate'] = str(fromDate.month)
    dictData['ddlCalYearDivFromDate'] = str(fromDate.year)
    dictData['ctl00$Content$NAVHistory1$txtToDate'] = toDate.strftime("%d/%m/%Y")
    dictData['ddlCalMonthDivToDate'] = str(toDate.month)
    dictData['ddlCalYearDivToDate'] = str(toDate.year)
    print("Fetching data from:"+fromDate.strftime("%d/%m/%Y") + " to:"+toDate.strftime("%d/%m/%Y"))
    result = requests.post('http://www.reliancepensionfund.com/navs/navhistory.aspx', headers=headers, params=params, cookies=cookies, data=dictData)

    #NB. Original query string below. It seems impossible to parse and
    #reproduce query strings 100% accurately so the one below is given
    #in case the reproduced version is not "correct".
    # requests.post('http://www.reliancepensionfund.com/navs/navhistory.aspx?shortname=navhistory', headers=headers, cookies=cookies, data=data)
    category = ''

    tableId = "ctl00_Content_NAVHistory1_gvNAVDisplay"
    rows = html2csv(result.text, tableId)
    for row in rows:
        if not row:
            continue
        if len(row) == 1:
            category = '' if row[0] == 'NPS Lite' else row[0]
            continue
        newRow = [row[2], row[0] if not category else row[0] + ' - ' + category, row[1]]
        writer.writerow(newRow)

    fromDate = fromDate + monthDelta
